
#include <netdb.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <arpa/inet.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <riyuu/riyuu.h>
#include <thpool/thpool.h>
#include <riyuu/argv_parser.h>
#include <riyuu/riyuu_socket.h>

char default_bind_addr[] = "0.0.0.0";

static void error(const char *msg);

void *thread_worker(void *_fd) {
	#define newsockfd (*((int *)_fd))

	while (1) {
		ssize_t n;
		char obj[100];

		n = read(newsockfd, obj, 100);

		if (n < 0) {
			error("ERROR reading from socket");
		}

		n = write(newsockfd, "I got your message\n", 19);

		if (n < 0) {
			error("ERROR writing to socket");
		}
	}
	close(newsockfd);
	return NULL;
	#undef newsockfd
}

static void error(const char *msg)
{
    perror(msg);
    exit(1);
}

riyuu_server_config *riyuu_server_init(riyuu_argv *opt, char **error)
{
	riyuu_server_config *config;
	if (opt == NULL) {
		goto err;
	}
	config = (riyuu_server_config *)malloc(sizeof(riyuu_server_config));
	config->bind_addr = default_bind_addr;
	config->bind_port = 54884;
	config->nickname = NULL;
	#pragma GCC diagnostic push
	#pragma GCC diagnostic ignored "-Wswitch"
	for (uint16_t i = 0; i < opt->opt_count; ++i) {
		switch (opt->opts[i]->opt) {
			case opt_server_bind_address:
				config->bind_addr = opt->opts[i]->arg;
			break;

			case opt_server_bind_port:
				config->bind_port = (uint16_t)atol(opt->opts[i]->arg);
			break;

			case opt_server_nickname:
				config->nickname = opt->opts[i]->arg;
			break;

			case opt_server_daemonize:

			break;
		}
	}
	#pragma GCC diagnostic pop

	return config;

err:
	if (error != NULL) {
		#define _error_text "Cannot initialize riyuu server: Config is empty!"
		*error = (char *)malloc(sizeof(_error_text) + 1);
		strcpy(*error, _error_text);
		#undef _error_text
	}
	return NULL;
}

uint8_t riyuu_server_run(riyuu_server_config *config)
{
	riyuu_tcp_bind(config->bind_addr, config->bind_port);
	return 0;
}

void riyuu_tcp_bind(char *addr, uint16_t port)
{
	socklen_t clilen;
	int sockfd, *newsockfd;
	struct sockaddr_in serv_addr, cli_addr;
	threadpool thpool;

	sockfd = socket(AF_INET, SOCK_STREAM, 0);

	if (sockfd < 0) {
		error("ERROR opening socket");
	}

	bzero((char *) &serv_addr, sizeof(serv_addr));
	serv_addr.sin_family = AF_INET;
	serv_addr.sin_addr.s_addr = inet_addr(addr);
	serv_addr.sin_port = htons(port);
	if (bind(sockfd, (struct sockaddr *) &serv_addr, sizeof(serv_addr)) < 0) {
		error("ERROR on binding");
	}
	listen(sockfd, 5);
	clilen = sizeof(cli_addr);

	printf("Listening on %s:%d...\n", addr, port);
	thpool = thpool_init(5);
	while (1) {
		newsockfd = (int *)malloc(sizeof(int));
		*newsockfd = accept(sockfd, (struct sockaddr *)&cli_addr, &clilen);
		if (*newsockfd < 0) {
			error("ERROR on accept");
		}
		thpool_add_work(thpool, thread_worker, (void *)newsockfd);
	}
   
   return;
}
